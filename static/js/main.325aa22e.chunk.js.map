{"version":3,"sources":["components/DivSizeTracker.js","App.js","serviceWorker.js","index.js"],"names":["DivSizeTracker","_ref","className","children","style","_useState","useState","_useState2","Object","slicedToArray","size","setSize","trackerRef","useRef","width","height","isRender","calcSize","useCallback","_trackerRef$current$g","current","getBoundingClientRect","useEffect","window","addEventListener","removeEventListener","useLayoutEffect","react_default","a","createElement","ref","concat","defaultProps","App","components_DivSizeTracker","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NASMA,EAAiB,SAAAC,GAAoC,IAAjCC,EAAiCD,EAAjCC,UAAWC,EAAsBF,EAAtBE,SAAUC,EAAYH,EAAZG,MAAYC,EACjCC,mBAAS,IADwBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClDK,EADkDH,EAAA,GAC5CI,EAD4CJ,EAAA,GAEnDK,EAAaC,iBAAO,MAClBC,EAAkBJ,EAAlBI,MAAOC,EAAWL,EAAXK,OACTC,EAAWF,GAASC,GAAUZ,GAAgC,oBAAbA,EAEjDc,EAAWC,sBAAY,WAAM,IAAAC,EACPP,EAAWQ,QAAQC,wBAArCP,EADyBK,EACzBL,MAAOC,EADkBI,EAClBJ,OACfJ,EAAQ,CAAEG,QAAOC,YAChB,IAaH,OAXAO,oBAAU,WAGR,OAFAC,OAAOC,iBAAiB,SAAUP,GAE3B,kBAAMM,OAAOE,oBAAoB,SAAUR,KACjD,IAEHS,0BAAgB,WACdT,KACC,IAIDU,EAAAC,EAAAC,cAAA,OACEzB,MAAOA,EACP0B,IAAKlB,EACLV,UAAS,oBAAA6B,OAAsB7B,IAE/ByB,EAAAC,EAAAC,cAAA,OAAK3B,UAAU,4BACZc,EAAWb,EAASW,EAAOC,GAAU,QAW9Cf,EAAegC,aAAe,CAC5B5B,MAAO,GACPF,UAAW,IAGEF,cChCAiC,MAlBf,WACE,OACEN,EAAAC,EAAAC,cAAA,OAAK3B,UAAU,OACbyB,EAAAC,EAAAC,cAACK,EAAD,CAAgB9B,MAAO,CAAEW,OAAQ,OAAQD,MAAO,SAC7C,SAACA,EAAOC,GAAR,OACCY,EAAAC,EAAAC,cAAA,OAAKzB,MAAO,CAAEU,QAAOC,UAAUb,UAAU,QAAzC,GAAA6B,OACMjB,EADN,OAAAiB,OACiBhB,MAKrBY,EAAAC,EAAAC,cAAA,OAAK3B,UAAU,aAAf,2BCHciC,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.325aa22e.chunk.js","sourcesContent":["import React, {\n  useState,\n  useRef,\n  useLayoutEffect,\n  useCallback,\n  useEffect,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nconst DivSizeTracker = ({ className, children, style }) => {\n  const [size, setSize] = useState({});\n  const trackerRef = useRef(null);\n  const { width, height } = size;\n  const isRender = width && height && children && typeof children === 'function';\n\n  const calcSize = useCallback(() => {\n    const { width, height } = trackerRef.current.getBoundingClientRect();\n    setSize({ width, height });\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('resize', calcSize);\n\n    return () => window.removeEventListener('resize', calcSize);\n  }, []);\n\n  useLayoutEffect(() => {\n    calcSize();\n  }, []);\n\n\n  return (\n    <div\n      style={style}\n      ref={trackerRef}\n      className={`div-size-tracker ${className}`}\n    >\n      <div className=\"div-size-tracker-content\">\n        {isRender ? children(width, height) : null}\n      </div>\n    </div>\n  );\n};\n\nDivSizeTracker.propTypes = {\n  className: PropTypes.string,\n  style: PropTypes.object,\n};\n\nDivSizeTracker.defaultProps = {\n  style: {},\n  className: '',\n};\n\nexport default DivSizeTracker;\n","import React from 'react';\nimport DivSizeTracker from './components/DivSizeTracker';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DivSizeTracker style={{ height: '50vh', width: '100%', }}>\n        {(width, height) => (\n          <div style={{ width, height }} className=\"test\">\n            {`${width} x ${height}`}\n          </div>\n        )}\n      </DivSizeTracker>\n\n      <div className=\"resize-it\">\n        Try resize the window\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}